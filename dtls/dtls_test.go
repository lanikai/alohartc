package dtls

import (
	"encoding/hex"
	"log"
	"testing"
)

func TestNewClientHello(t *testing.T) {
	ch := newClientHello().marshal()

	log.Println(hex.EncodeToString(ch))
}

func TestRecordUnmarshal(t *testing.T) {
	rin := record{
		contentType: HandshakeContentType,
		sequenceNumber: 0xcafedeadbeef,
		epoch: 12345,
		version: 0xfefd,
	}
	rout := record{}

	buffer := rin.marshal()
	rout.unmarshal(buffer)

	if (rin != rout) {
//		t.Fail()
	}
}

func TestUnmarshal(t *testing.T) {
	// Server Hello
	// Certificate
	// Server Key Exchange
	// Certificate Request
	// Server Hello Done
	b := []byte{
		0x16, 0xfe, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00,
		0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x44, 0xfe, 0xfd, 0x5b, 0x4c, 0xed, 0x15, 0x48,
		0xf7, 0xbb, 0xd2, 0x5d, 0x97, 0xff, 0x41, 0x16,
		0xd1, 0xa5, 0x2b, 0x66, 0x74, 0x81, 0x17, 0xd8,
		0xfe, 0xfb, 0x30, 0x88, 0xc4, 0x30, 0xe4, 0x76,
		0x85, 0x41, 0x71, 0x00, 0xc0, 0x2b, 0x00, 0x00,
		0x1c, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x17,
		0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0e,
		0x00, 0x05, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00,
		0x0b, 0x00, 0x02, 0x01, 0x00, 0x16, 0xfe, 0xfd,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x01, 0x2c, 0x0b, 0x00, 0x01, 0x20, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 0x01,
		0x1d, 0x00, 0x01, 0x1a, 0x30, 0x82, 0x01, 0x16,
		0x30, 0x81, 0xbd, 0xa0, 0x03, 0x02, 0x01, 0x02,
		0x02, 0x09, 0x00, 0xa7, 0x9e, 0x19, 0x3a, 0x5f,
		0xb9, 0x03, 0x4f, 0x30, 0x0a, 0x06, 0x08, 0x2a,
		0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
		0x11, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55,
		0x04, 0x03, 0x0c, 0x06, 0x57, 0x65, 0x62, 0x52,
		0x54, 0x43, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38,
		0x30, 0x37, 0x31, 0x35, 0x31, 0x39, 0x30, 0x37,
		0x31, 0x32, 0x5a, 0x17, 0x0d, 0x31, 0x38, 0x30,
		0x38, 0x31, 0x35, 0x31, 0x39, 0x30, 0x37, 0x31,
		0x32, 0x5a, 0x30, 0x11, 0x31, 0x0f, 0x30, 0x0d,
		0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x06, 0x57,
		0x65, 0x62, 0x52, 0x54, 0x43, 0x30, 0x59, 0x30,
		0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d,
		0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
		0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,
		0xa3, 0x48, 0xb8, 0x74, 0xc5, 0x74, 0xc6, 0xbd,
		0x11, 0x4a, 0x8e, 0x7a, 0xff, 0x90, 0x47, 0x6f,
		0x48, 0xcd, 0x51, 0x61, 0xc9, 0xe6, 0xce, 0xe4,
		0xdc, 0xff, 0x00, 0xca, 0x0c, 0xe5, 0x80, 0x30,
		0x94, 0x4f, 0x16, 0x0d, 0x1b, 0x4d, 0xc1, 0x08,
		0x36, 0x27, 0x43, 0x07, 0xaf, 0xea, 0x02, 0xd7,
		0x51, 0x29, 0xc9, 0x73, 0x9e, 0x0a, 0x0c, 0x79,
		0x31, 0x22, 0x6b, 0xb0, 0x20, 0xa2, 0x5c, 0x9a,
		0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
		0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30,
		0x45, 0x02, 0x20, 0x6d, 0x5f, 0x38, 0x0c, 0xfd,
		0xfe, 0xa2, 0x13, 0xc0, 0x84, 0xad, 0x9f, 0x92,
		0x50, 0x3e, 0xf1, 0x0f, 0x9c, 0xbd, 0x1f, 0xff,
		0x39, 0xfd, 0xc0, 0xcd, 0x5b, 0x8d, 0x66, 0x17,
		0x30, 0x22, 0xc3, 0x02, 0x21, 0x00, 0xd2, 0x05,
		0x12, 0xf1, 0x33, 0xfb, 0x51, 0xba, 0xbf, 0xeb,
		0x9d, 0xdc, 0x8c, 0x18, 0x4c, 0x1d, 0x08, 0xb5,
		0x01, 0xcb, 0xff, 0x3d, 0xe6, 0x27, 0xb6, 0x8c,
		0x04, 0xc5, 0xea, 0x0a, 0x72, 0x94, 0x16, 0xfe,
		0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x7a, 0x0c, 0x00, 0x00, 0x6e, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x03,
		0x00, 0x1d, 0x20, 0x61, 0x8e, 0x8c, 0xae, 0x4e,
		0x87, 0xd4, 0x43, 0xd6, 0xa1, 0xad, 0x66, 0xb3,
		0xde, 0x9b, 0xbc, 0x5e, 0x71, 0xa0, 0xd2, 0xc9,
		0x8d, 0xed, 0x19, 0x64, 0xd4, 0xed, 0x4e, 0x30,
		0xa4, 0xb0, 0x1b, 0x04, 0x03, 0x00, 0x46, 0x30,
		0x44, 0x02, 0x20, 0x09, 0xe0, 0x79, 0xda, 0xab,
		0xb0, 0x63, 0xfb, 0x9d, 0x85, 0x2d, 0x74, 0x0f,
		0xd0, 0x93, 0x08, 0x24, 0xfe, 0xe3, 0x68, 0x9e,
		0x80, 0x30, 0x1a, 0xba, 0x29, 0x28, 0xff, 0x2a,
		0xd9, 0xf5, 0x16, 0x02, 0x20, 0x71, 0x1d, 0x9e,
		0x3e, 0xc3, 0xe5, 0xac, 0xc3, 0x5d, 0x0b, 0x69,
		0xfe, 0x74, 0xb0, 0x3f, 0xab, 0x83, 0x69, 0xc5,
		0xe5, 0xab, 0x64, 0xdc, 0x26, 0xd9, 0x41, 0xa7,
		0xfb, 0x0d, 0x5f, 0xcb, 0x18, 0x16, 0xfe, 0xfd,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x25, 0x0d, 0x00, 0x00, 0x19, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x02, 0x01,
		0x40, 0x00, 0x12, 0x04, 0x03, 0x08, 0x04, 0x04,
		0x01, 0x05, 0x03, 0x08, 0x05, 0x05, 0x01, 0x08,
		0x06, 0x06, 0x01, 0x02, 0x01, 0x00, 0x00, 0x16,
		0xfe, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x04, 0x00, 0x0c, 0x0e, 0x00, 0x00, 0x00,
		0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	p := packet{}

	if err := p.unmarshal(b); err != nil {
		t.Log("error:", err)
		t.Fail()
	}

	if len(p.records) != 5 {
		t.Fail()
	}

	log.Println(p)
}
