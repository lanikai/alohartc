package webrtc

import (
	"crypto/hmac"
	"crypto/sha1"
	"encoding/binary"
	"hash/crc32"
	"fmt"
	"log"
	"net"
	"strings"
)

type packet struct {
	msgType uint
	length uint16
	cookie uint32
	tid [12]byte
}

func StunBindingRequest(candidate string, key string) error {
        fields := strings.Fields(candidate)

        // Skip non-UDP
        if protocol := fields[2]; protocol != "udp" {
                return nil
        }

        ip, port, ufrag := fields[4], fields[5], fields[11]
        log.Println(ip, port, ufrag)

	b := []byte{
		0x00, 0x01, 0x00, 0x4c, 0x21, 0x12, 0xa4, 0x42,
		0x56, 0x41, 0x66, 0x33, 0x5a, 0x49, 0x73, 0x4c,
		0x31, 0x64, 0x2f, 0x46, 0x00, 0x06, 0x00, 0x09,
		0x74, 0x6c, 0x47, 0x61, 0x3a, 0x6e, 0x33, 0x45,
		0x33, 0x00, 0x00, 0x00, 0xc0, 0x57, 0x00, 0x04,
		0x00, 0x01, 0x00, 0x0a, 0x80, 0x29, 0x00, 0x08,
		0x57, 0xfa, 0x3a, 0xdb, 0xb9, 0x81, 0x0a, 0xdd,
		0x00, 0x24, 0x00, 0x04, 0x6e, 0x7f, 0x1e, 0xff,
		0x00, 0x08, 0x00, 0x14, 0x16, 0xae, 0x21, 0xab,
		0x58, 0xa5, 0xba, 0x5f, 0x5d, 0x1d, 0xfe, 0xde,
		0xc5, 0x65, 0x52, 0xf5, 0x6f, 0x08, 0x60, 0x37,
		0x80, 0x28, 0x00, 0x04, 0x31, 0xfd, 0x4e, 0x69,
	}
	copy(b[24:28], ufrag)

	originalLength := b[3]
	b[3] = 0x44

	sig := hmac.New(sha1.New, []byte(key))
	sig.Write(b[0:64])

	mig := []byte(sig.Sum(nil))

	b[3] = originalLength

	copy(b[68:88], mig)
	log.Println(mig)
	log.Println(b)

	crc32q := crc32.MakeTable(crc32.IEEE)
	crc := crc32.Checksum(b[0:88], crc32q)
	crc = crc ^ 0x5354554e
	binary.BigEndian.PutUint32(b[92:96], crc)

	raddr, err := net.ResolveUDPAddr("udp", fmt.Sprintf("%s:%s", ip, port))
	if err != nil {
		return err
	}

	conn, err := net.DialUDP("udp", nil, raddr)
	if err != nil {
		return err
	}
	defer conn.Close()

	conn.Write(b)

	return nil
}
