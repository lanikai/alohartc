<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>{{ define "title" }}{{ end }}</title>
  <style>
    html {
      padding: 0;
      margin: 0;
    }
    body {
      padding: 0;
      margin: 0;
      overflow-y: hidden;
    }
    video {
      background: #222;
      width: 100vw;
      height: 100vh;
      max-width: 100%;
      max-height: 100%;
    }
  </style>
</head>
<body>
  <video id="remoteVideo" autoplay controls muted></video>

  <script src="/static/js/adapter-latest.js"></script>
  <script>
    let pc;

    const remoteVideo = document.getElementById("remoteVideo");

    // Create a websocket connection for exchanging SDP data
    const ws = new WebSocket('ws://' + location.host + '/ws');

    ws.addEventListener("message", function (event) {
      var msg = JSON.parse(event.data);
      console.log("websocket message received")
      console.log("type:", msg.type)
      console.log("text:", msg.text);
      switch(msg.type) {
        case "answer":
          pc.setRemoteDescription({ "type": "answer", "sdp": msg.text })
          .then(function() {
            console.log("setRemoteDescription success");
          }).catch(function(error) {
            console.log("setRemoteDescription error: " + error);
          });
          break;
        case "iceCandidate":
          if (msg.text) {
            pc.addIceCandidate({
              candidate: msg.text,
              sdpMid: msg.params.sdpMid,
            }).catch(function(error) {
              console.log("Failed to add remote ICE candidate to local ICE agent:", error);
            });
          } else {
            pc.addIceCandidate(null)
            .catch(function(error) {
              console.log("Failed to signal end of remate ICE candidates:", error);
            });
          }
          break;
      }
    });

    ws.addEventListener("open", function (event) {
      console.log("websocket opened");
      // Create WebRTC peer-to-peer connection
      pc = new RTCPeerConnection();

      // Called by the browser's ICE agent when it determines a new local candidate.
      pc.onicecandidate = function(event) {
        if (event.candidate) {
          console.log("New local ICE candidate:", event.candidate);
        } else {
          console.log("End of local ICE candidates");
        }

        // Inform the remote ICE agent.
        ws.send(JSON.stringify({
          type: "iceCandidate",
          text: event.candidate ? event.candidate.candidate : ""
        }));
      };

      pc.onicegatheringstatechange = function() {
        console.log("New ICE gathering state:", pc.iceGatheringState);
      };

      pc.oniceconnectionstatechange = function() {
        console.log("New ICE connection state:", pc.iceConnectionState);
      };

      pc.onsignalingstatechange = function() {
        console.log("New signaling state:", pc.signalingState);
      };

      pc.ontrack = function(e) {
        if (remoteVideo.srcObject !== e.streams[0]) {
            remoteVideo.srcObject = e.streams[0];
            console.log("received remote stream!");
        }
      }

      // Called upon successful offer creation
      function onCreateOfferSuccess(desc) {
        console.log("onCreateOfferSuccess:", desc.sdp);
        pc.setLocalDescription(desc);
        ws.send(JSON.stringify({
          type: "offer",
          text: desc.sdp
        }));
      }

      // Create offer and send to callee
      pc.createOffer({ offerToReceiveAudio: false, offerToReceiveVideo: true })
        .then(onCreateOfferSuccess)
        .catch(function(error) {
          console.log("createOffer failure:", error);
        });
    });
  </script>
</body>
</html>
